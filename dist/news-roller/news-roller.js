import{detectPathOffset}from"../lib/path-utils.js";class NewsRoller extends HTMLElement{static TAG='news-roller';self=NewsRoller;pathOffset=detectPathOffset(this.baseURI,import.meta.url);shadow=null;static LEFT='left';static RIGHT='right';static TOP='top';static BOTTOM='bottom';static masterID=1;$labels;$screens;curEntry;entries;mutationObserver;constructor(...args){super(...args);this.curEntry=null;this.entries=[];this.shadow=this.attachShadow({mode:'open'});const tpl=this.#buildTemplate(this.self.LEFT);this.shadow.innerHTML=tpl;this.$labels=this.shadow.querySelector('#labels_container');this.$screens=this.shadow.querySelector('#screens_container');this.mutationObserver=new MutationObserver(this.onMutation.bind(this))}connectedCallback(){this.detectEntries()}disconnectedCallback(){this.uninstallEntries()}detectEntries(){this.uninstallEntries();let new_entries=[];const $labels_slot=this.shadow.querySelector('slot[name="label"]');const $screens_slot=this.shadow.querySelector('slot:not([name])');const $labels=$labels_slot.assignedElements();const $screens=$screens_slot.assignedElements();const max_count=Math.min($labels.length,$screens.length);for(let i=0;i<max_count;++i){const $label=$labels[i];const $screen=$screens[i];const entry=new NewsRollerEntry($label,$screen);entry.install(this);new_entries.push(entry)}this.entries=new_entries;if(this.entries.length>0)this.setCurEntry(this.entries[0].entryID);this.mutationObserver.observe(this,{childList:true})}uninstallEntries(){this.mutationObserver.disconnect();for(const entry of this.entries)entry.uninstall();this.entries=[]}static get observedAttributes(){return[]}attributeChangedCallback(name,oldValue,newValue){switch(name){default:break}}setCurEntry(entry_id){if(this.curEntry&&(this.curEntry.entryID==entry_id))return;if(this.curEntry){this.curEntry.unselect()}const sel_entry=this.findEntry(entry_id);if(sel_entry){sel_entry.select()}this.curEntry=sel_entry}findEntry(entry_id){for(const entry of this.entries)if(entry.is(entry_id))return entry;return null}onLabelClick(entry,ev){console.log('clicked '+entry.entryID);this.setCurEntry(entry.entryID)}onMutation(ev){this.detectEntries()}#buildTemplate(side){this.setAttribute('side',side);return `<link rel="stylesheet"type="text/css"href="${this.pathOffset}news-roller.css"/><div id="labels_container"><slot name="label"></slot></div><div id="screens_container"><slot></slot></div>`}}class NewsRollerEntry{entryID;roller;$label;$screen;#bindings;constructor($label,$screen){this.entryID=0;this.roller=null;this.$label=$label||null;this.$screen=$screen||null;this.#bindings={}}is(entry_id){return this.entryID==entry_id}f;install(roller){this.roller=roller;this.entryID=roller.self.masterID++;this.#bindings.labelClick=this.roller.onLabelClick.bind(this.roller,this);this.$label.addEventListener('click',this.#bindings.labelClick)}uninstall(){this.$label.removeEventListener('click',this.#bindings.labelClick);this.roller=null;this.entryID=-1}select(){this.$label.classList.add('show');this.$screen.classList.add('show')}unselect(){this.$label.classList.remove('show');this.$screen.classList.remove('show')}EntryChangeEvent=class extends Event{}}customElements.define(NewsRoller.TAG,NewsRoller);